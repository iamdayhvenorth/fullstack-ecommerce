// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname       String?
  lastname        String?
  email           String    @unique
  secondaryEmail  String?
  emailVerified   DateTime?
  isEmailVerified Boolean   @default(false)
  password        String?
  image           String?
  role            Role      @default(CUSTOMER)
  bio             String?
  address         Address[]
  dob             DateTime?
  phone           String?
  gender          Gender?
  country         String?
  state           String?
  zip             String?
  accounts        Account[]
  // profilePic     String? @db.String
  // coverPic       String? @db.String
  // socialAccounts SocialAccount[]

  // sessions      Session[]
  // Optional for WebAuthn support

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  CUSTOMER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum AddressType {
  BILLING
  SHIPPING
}

model Address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  firstName String
  lastName  String
  type      AddressType @default(BILLING)
  address   String
  country   String
  city      String
  state     String
  zip       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id, type])
}

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model EmailResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  token   String
  expires DateTime

  @@unique([userId, id])
}

model EmailVerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   @db.ObjectId
  token   String
  expires DateTime

  @@unique([userId, id])
}
